
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface GoogleSheetsRequest {
  action: 'auth' | 'read' | 'write' | 'create';
  sheetId?: string;
  data?: any[][];
  range?: string;
  title?: string;
  code?: string;
  redirectUri?: string;
}

serve(async (req) => {
  console.log('üåê Edge Function appel√©e:', {
    method: req.method,
    url: req.url,
    headers: Object.fromEntries(req.headers.entries())
  });

  if (req.method === 'OPTIONS') {
    console.log('‚úÖ Requ√™te OPTIONS - retour des headers CORS');
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const clientId = Deno.env.get('GOOGLE_SHEETS_CLIENT_ID');
    const clientSecret = Deno.env.get('GOOGLE_SHEETS_CLIENT_SECRET');
    
    console.log('üîë Diagnostic des variables d\'environnement:', {
      hasClientId: !!clientId,
      hasClientSecret: !!clientSecret,
      clientIdPrefix: clientId ? clientId.substring(0, 20) + '...' : 'MANQUANT',
      clientSecretPrefix: clientSecret ? clientSecret.substring(0, 20) + '...' : 'MANQUANT'
    });

    if (!clientId || !clientSecret) {
      throw new Error('Configuration manquante: Variables Google Sheets non d√©finies');
    }

    let requestBody;
    try {
      const bodyText = await req.text();
      console.log('üì® Corps de la requ√™te (brut):', bodyText);
      requestBody = JSON.parse(bodyText);
      console.log('üì® Corps de la requ√™te (pars√©):', requestBody);
    } catch (error) {
      console.error('‚ùå Impossible de parser le JSON:', error);
      throw new Error('Corps de requ√™te JSON invalide: ' + error.message);
    }

    const { action, sheetId, data, range, title, code, redirectUri }: GoogleSheetsRequest = requestBody;

    console.log(`üéØ Action Google Sheets: ${action}`);

    switch (action) {
      case 'auth':
        return await handleAuth(clientId, clientSecret, code, redirectUri);
      
      case 'read':
        if (!sheetId) throw new Error('sheetId requis pour la lecture');
        return await handleRead(sheetId, range || 'A:Z', req);
      
      case 'write':
        if (!sheetId || !data) throw new Error('sheetId et data requis pour l\'√©criture');
        return await handleWrite(sheetId, data, range || 'A1', req);
      
      case 'create':
        if (!title) throw new Error('title requis pour la cr√©ation');
        return await handleCreate(title, req);
      
      default:
        throw new Error(`Action non support√©e: ${action}`);
    }

  } catch (error) {
    console.error('‚ùå Erreur Google Sheets API:', {
      message: error.message,
      stack: error.stack,
      name: error.name,
      cause: error.cause
    });
    
    const errorResponse = {
      error: error.message || 'Erreur inconnue',
      details: error.stack || 'Pas de d√©tails disponibles',
      timestamp: new Date().toISOString(),
      action: 'V√©rifiez la configuration des secrets Google Sheets dans Supabase'
    };

    return new Response(
      JSON.stringify(errorResponse),
      { 
        status: error.message.includes('Configuration') ? 500 : 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});

async function handleAuth(clientId: string, clientSecret: string, code?: string, redirectUri?: string) {
  console.log('üîê Gestion de l\'authentification:', { 
    hasCode: !!code,
    hasRedirectUri: !!redirectUri,
    clientIdLength: clientId.length,
    clientSecretLength: clientSecret.length
  });

  // CORRECTION CRITIQUE : Utiliser l'URI fournie par le client ou d√©tecter automatiquement
  if (!redirectUri) {
    console.error('‚ùå URI de redirection manquante dans la requ√™te');
    throw new Error('URI de redirection requise. Veuillez fournir redirectUri dans la requ√™te.');
  }

  console.log('üåê URI de redirection utilis√©e:', redirectUri);

  if (!code) {
    console.log('üåê G√©n√©ration de l\'URL d\'authentification avec URI:', redirectUri);
    
    // G√©n√©rer un param√®tre state pour la s√©curit√©
    const state = crypto.randomUUID();
    console.log('üîê State g√©n√©r√© pour la s√©curit√©:', state);
    
    const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?` +
      `client_id=${encodeURIComponent(clientId)}&` +
      `redirect_uri=${encodeURIComponent(redirectUri)}&` +
      `response_type=code&` +
      `scope=${encodeURIComponent('https://www.googleapis.com/auth/spreadsheets https://www.googleapis.com/auth/drive.file')}&` +
      `access_type=offline&` +
      `prompt=consent&` +
      `state=${encodeURIComponent(state)}`;
    
    console.log('‚úÖ URL d\'authentification g√©n√©r√©e avec succ√®s');
    
    return new Response(
      JSON.stringify({ authUrl, state }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }

  // √âchange du code d'autorisation
  console.log('üîÑ √âchange du code d\'autorisation...', {
    codeLength: code.length,
    redirectUri: redirectUri
  });
  
  try {
    const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json'
      },
      body: new URLSearchParams({
        client_id: clientId,
        client_secret: clientSecret,
        code: code,
        grant_type: 'authorization_code',
        redirect_uri: redirectUri
      })
    });

    console.log('üì° R√©ponse OAuth Google:', {
      status: tokenResponse.status,
      statusText: tokenResponse.statusText,
      headers: Object.fromEntries(tokenResponse.headers.entries())
    });

    const tokenData = await tokenResponse.json();
    
    if (!tokenResponse.ok) {
      console.error('‚ùå Erreur lors de l\'√©change du token:', {
        status: tokenResponse.status,
        error: tokenData.error,
        error_description: tokenData.error_description,
        fullResponse: tokenData
      });
      
      throw new Error(`Erreur OAuth Google (${tokenResponse.status}): ${tokenData.error_description || tokenData.error || 'Erreur inconnue'}`);
    }

    console.log('‚úÖ Token √©chang√© avec succ√®s:', {
      hasAccessToken: !!tokenData.access_token,
      hasRefreshToken: !!tokenData.refresh_token,
      tokenType: tokenData.token_type,
      expiresIn: tokenData.expires_in
    });

    return new Response(
      JSON.stringify(tokenData),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'√©change du token:', error);
    throw new Error(`Impossible d'√©changer le code d'autorisation: ${error.message}`);
  }
}

async function getAccessToken(request: Request): Promise<string> {
  console.log('üîê === EXTRACTION TOKEN ===');
  console.log('Headers de la requ√™te:', Object.fromEntries(request.headers.entries()));
  
  const authHeader = request.headers.get('Authorization');
  console.log('Header Authorization brut:', authHeader);
  
  if (!authHeader) {
    console.error('‚ùå Aucun header Authorization trouv√©');
    throw new Error('Token d\'acc√®s manquant dans les headers - Header Authorization requis');
  }
  
  if (!authHeader.startsWith('Bearer ')) {
    console.error('‚ùå Format d\'Authorization invalide:', authHeader.substring(0, 50) + '...');
    throw new Error('Token d\'acc√®s invalide - Format Bearer requis');
  }
  
  const token = authHeader.replace('Bearer ', '');
  console.log('‚úÖ Token extrait:', {
    tokenPrefix: token.substring(0, 20) + '...',
    tokenLength: token.length
  });
  
  return token;
}

async function handleRead(sheetId: string, range: string, request: Request) {
  let accessToken;
  try {
    accessToken = await getAccessToken(request);
  } catch (error) {
    console.error('‚ùå Erreur extraction token:', error.message);
    throw error;
  }
  
  console.log(`üìñ === DEBUT LECTURE AMELIOREE ===`);
  console.log(`üìã Feuille: ${sheetId}`);
  console.log(`üìä Range demand√©: ${range}`);
  
  // Validation de l'ID de la feuille
  if (!sheetId || sheetId.length < 10 || !/^[a-zA-Z0-9-_]+$/.test(sheetId)) {
    throw new Error('ID de feuille Google Sheets invalide');
  }
  
  // Essayer plusieurs plages pour maximiser la r√©cup√©ration de donn√©es
  const rangeAttempts = [
    range, // Plage demand√©e
    'A1:Z1000', // Plage large par d√©faut
    'Sheet1!A1:Z1000', // Avec nom de feuille
    'A:AZ', // Toutes les lignes, colonnes A √† AZ
    '1:1000' // Toutes les colonnes, 1000 premi√®res lignes
  ];
  
  let lastError = null;
  
  for (const currentRange of rangeAttempts) {
    try {
      console.log(`üìä Tentative de lecture avec la plage: ${currentRange}`);
      
      const googleApiUrl = `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/${encodeURIComponent(currentRange)}`;
      console.log(`üåê URL Google API: ${googleApiUrl}`);
      
      const response = await fetch(googleApiUrl, {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        }
      });

      console.log(`üì° R√©ponse Google API pour ${currentRange}:`, {
        status: response.status,
        statusText: response.statusText,
        headers: Object.fromEntries(response.headers.entries())
      });

      // V√©rifier le Content-Type de la r√©ponse
      const contentType = response.headers.get('content-type');
      
      if (!response.ok) {
        const responseText = await response.text();
        console.error(`‚ùå Erreur HTTP ${response.status} pour ${currentRange}:`, responseText);
        
        if (response.status === 403) {
          lastError = new Error('Acc√®s refus√© √† la feuille Google Sheets. V√©rifiez les permissions de partage.');
          continue; // Essayer la plage suivante
        } else if (response.status === 404) {
          lastError = new Error('Feuille ou plage introuvable. V√©rifiez l\'ID de la feuille.');
          continue; // Essayer la plage suivante
        } else if (response.status === 400) {
          lastError = new Error(`Plage invalide: ${currentRange}`);
          continue; // Essayer la plage suivante
        } else if (response.status === 401) {
          console.error('üîê Erreur 401 - Token invalide ou expir√©');
          lastError = new Error('Token d\'authentification invalide ou expir√©. Reconnectez-vous.');
          continue;
        }
        
        throw new Error(`Erreur API Google Sheets (${response.status}): ${response.statusText}`);
      }
      
      if (!contentType?.includes('application/json')) {
        console.error(`‚ùå R√©ponse non-JSON pour ${currentRange}:`, contentType);
        lastError = new Error('R√©ponse non-JSON re√ßue du serveur');
        continue;
      }

      const data = await response.json();
      
      console.log(`‚úÖ Donn√©es r√©cup√©r√©es avec ${currentRange}:`, {
        hasValues: !!data.values,
        valuesType: typeof data.values,
        valuesIsArray: Array.isArray(data.values),
        totalRows: data.values?.length || 0,
        range: data.range,
        majorDimension: data.majorDimension
      });

      // V√©rifier si on a des donn√©es valides
      if (data.values && Array.isArray(data.values) && data.values.length > 0) {
        console.log(`üìã Succ√®s avec ${currentRange} - ${data.values.length} lignes trouv√©es`);
        
        // Log d√©taill√© des donn√©es
        data.values.forEach((row, index) => {
          const rowData = Array.isArray(row) ? row : [];
          console.log(`  Ligne ${index + 1}: [${rowData.length} colonnes]`, rowData.slice(0, 5));
        });

        // Ne pas filtrer les lignes vides ici - laisser le frontend d√©cider
        const processedData = data.values.map(row => 
          Array.isArray(row) ? row : []
        );

        console.log(`‚úÖ === LECTURE REUSSIE ===`);
        console.log(`üìä Donn√©es finales: ${processedData.length} lignes`);

        return new Response(
          JSON.stringify({
            values: processedData,
            range: data.range || currentRange,
            majorDimension: data.majorDimension || 'ROWS',
            title: `Feuille Google Sheets - ${processedData.length} lignes`,
            rangeUsed: currentRange
          }),
          { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      } else {
        console.log(`‚ö†Ô∏è Pas de donn√©es avec ${currentRange}:`, data);
        lastError = new Error(`Aucune donn√©e trouv√©e avec la plage ${currentRange}`);
        continue;
      }
      
    } catch (error) {
      console.error(`‚ùå Erreur avec la plage ${currentRange}:`, error);
      lastError = error;
      continue;
    }
  }
  
  // Si toutes les tentatives ont √©chou√©
  console.error('‚ùå === ECHEC COMPLET DE LECTURE ===');
  console.error('Toutes les plages ont √©chou√©:', rangeAttempts);
  console.error('Derni√®re erreur:', lastError);
  
  throw lastError || new Error('Impossible de lire les donn√©es de la feuille avec toutes les plages tent√©es');
}

async function handleWrite(sheetId: string, data: any[][], range: string, request: Request) {
  const accessToken = await getAccessToken(request);
  
  console.log(`‚úçÔ∏è √âcriture dans la feuille ${sheetId}, plage ${range}`);
  
  const response = await fetch(
    `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/${range}?valueInputOption=USER_ENTERED`,
    {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        values: data
      })
    }
  );

  const result = await response.json();
  
  if (!response.ok) {
    console.error('‚ùå Erreur √©criture Google Sheets:', result);
    throw new Error(`Erreur √©criture: ${result.error?.message || 'Erreur inconnue'}`);
  }

  console.log('‚úÖ Donn√©es √©crites avec succ√®s');

  return new Response(
    JSON.stringify(result),
    { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
  );
}

async function handleCreate(title: string, request: Request) {
  const accessToken = await getAccessToken(request);
  
  console.log(`üìù Cr√©ation d'une nouvelle feuille: ${title}`);
  
  const response = await fetch(
    'https://sheets.googleapis.com/v4/spreadsheets',
    {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        properties: {
          title: title
        }
      })
    }
  );

  const result = await response.json();
  
  if (!response.ok) {
    console.error('‚ùå Erreur cr√©ation Google Sheets:', result);
    throw new Error(`Erreur cr√©ation: ${result.error?.message || 'Erreur inconnue'}`);
  }

  console.log('‚úÖ Feuille cr√©√©e avec succ√®s');

  return new Response(
    JSON.stringify({
      spreadsheetId: result.spreadsheetId,
      spreadsheetUrl: result.spreadsheetUrl
    }),
    { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
  );
}
