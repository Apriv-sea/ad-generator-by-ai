import { SecureLLMService } from './llm/secureLLMService';
import { supabase } from '@/integrations/supabase/client';

interface WebsiteAnalysis {
  industry: string;
  toneOfVoice: string;
  keyMessages: string[];
  communicationStyle: string;
  brandValues: string[];
  targetAudience: string;
}

interface MarketResearch {
  competitiveAnalysis: string;
  marketTrends: string;
  opportunities: string[];
  challenges: string[];
}

interface ClientContextData {
  businessName: string;
  websiteUrl: string;
  websiteAnalysis: WebsiteAnalysis;
  marketResearch: MarketResearch;
}

interface GeneratedContext {
  industry: string;
  toneOfVoice: string;
  keyMessages: string[];
  communicationStyle: string;
  competitiveAnalysis: string;
  marketTrends: string;
  businessContext: string;
  editorialGuidelines: string;
  targetAudience: string;
  brandValues: string[];
}

export class ClientContextAnalysisService {
  
  // V√©rifier si l'utilisateur a des cl√©s API configur√©es
  static async checkApiKeysAvailability(): Promise<{ hasKeys: boolean; providers: string[] }> {
    try {
      const validation = await SecureLLMService.validateApiKeys();
      const availableProviders = Object.entries(validation)
        .filter(([_, isValid]) => isValid)
        .map(([provider, _]) => provider);
      
      return {
        hasKeys: availableProviders.length > 0,
        providers: availableProviders
      };
    } catch (error) {
      console.error('Erreur lors de la v√©rification des cl√©s API:', error);
      return { hasKeys: false, providers: [] };
    }
  }

  // Analyser le site web d'un client
  static async analyzeWebsite(websiteUrl: string, selectedModel: string = 'openai:gpt-4.1-2025-04-14'): Promise<WebsiteAnalysis> {
    console.log('üåê Analyse du site web:', websiteUrl);
    
    // V√©rifier les cl√©s API
    const { hasKeys, providers } = await this.checkApiKeysAvailability();
    console.log('üîë Cl√©s API disponibles:', { hasKeys, providers });
    
    if (!hasKeys) {
      throw new Error('Aucune cl√© API configur√©e. Veuillez configurer vos cl√©s API dans les param√®tres.');
    }

    try {
      // Scraper le contenu du site avec Firecrawl via edge function
      console.log('üì° Appel du website-scraper pour:', websiteUrl);
      const { data: scrapedData, error: scrapeError } = await supabase.functions.invoke('website-scraper', {
        body: { url: websiteUrl }
      });

      console.log('üì° R√©ponse du website-scraper:', { 
        hasData: !!scrapedData, 
        hasError: !!scrapeError,
        dataKeys: scrapedData ? Object.keys(scrapedData) : [],
        error: scrapeError 
      });

      if (scrapeError) {
        throw new Error(`Erreur lors du scraping: ${scrapeError.message}`);
      }

      // Analyser le contenu avec l'IA
      const analysisPrompt = `
Analysez le contenu suivant d'un site web et extrayez les informations cl√©s pour cr√©er un contexte client.

URL: ${websiteUrl}
Contenu: ${scrapedData.content || 'Contenu non disponible'}

Analysez et retournez au format JSON:
{
  "industry": "secteur d'activit√© principal",
  "toneOfVoice": "ton de communication (professionnel, d√©contract√©, innovant, etc.)",
  "keyMessages": ["message cl√© 1", "message cl√© 2", "message cl√© 3"],
  "communicationStyle": "description du style de communication",
  "brandValues": ["valeur 1", "valeur 2", "valeur 3"],
  "targetAudience": "description de la cible principale"
}

Soyez pr√©cis et basez-vous uniquement sur le contenu fourni.
      `;

      // Parser le mod√®le s√©lectionn√©
      const [provider, model] = selectedModel.includes(':') 
        ? selectedModel.split(':') 
        : ['openai', selectedModel];

      console.log('ü§ñ Appel du service LLM avec:', { provider, model, contentLength: analysisPrompt.length });

      const { data, error } = await supabase.functions.invoke('secure-llm-api', {
        body: {
          provider,
          model,
          messages: [
            { role: 'system', content: 'Tu es un expert en analyse de sites web et cr√©ation de contextes clients pour le marketing.' },
            { role: 'user', content: analysisPrompt }
          ],
          maxTokens: 1500,
          temperature: 0.3
        }
      });

      if (error) {
        throw new Error(`Erreur IA: ${error.message}`);
      }

      // La r√©ponse est d√©sormais normalis√©e par l'edge function
      const responseContent = data?.content || '';
      if (!responseContent) {
        console.error('Aucun contenu dans la r√©ponse:', data);
        throw new Error('R√©ponse vide du service LLM');
      }

      console.log('ü§ñ R√©ponse du service LLM:', { 
        hasContent: !!responseContent, 
        contentLength: responseContent?.length,
        contentStart: responseContent?.substring(0, 200)
      });

      // Parser la r√©ponse JSON
      let analysisResult: WebsiteAnalysis;
      try {
        // Extraire le JSON de la r√©ponse
        const jsonMatch = responseContent?.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          analysisResult = JSON.parse(jsonMatch[0]);
        } else {
          throw new Error('Format de r√©ponse invalide');
        }
      } catch (parseError) {
        console.error('Erreur de parsing JSON:', parseError);
        // Fallback avec des valeurs par d√©faut
        analysisResult = {
          industry: 'Non d√©termin√©',
          toneOfVoice: 'Professionnel',
          keyMessages: ['Message principal √† d√©finir'],
          communicationStyle: 'Style √† analyser',
          brandValues: ['√Ä d√©finir'],
          targetAudience: 'Cible √† pr√©ciser'
        };
      }

      console.log('‚úÖ Analyse du site termin√©e:', analysisResult);
      return analysisResult;

    } catch (error) {
      console.error('‚ùå Erreur lors de l\'analyse du site:', error);
      throw new Error(`Impossible d'analyser le site web: ${(error as Error).message}`);
    }
  }

  // Effectuer une recherche sectorielle
  static async conductMarketResearch(businessName: string, industry: string, selectedModel: string = 'openai:gpt-4.1-2025-04-14'): Promise<MarketResearch> {
    console.log('üîç Recherche sectorielle pour:', businessName, 'dans', industry);
    
    try {
      // Recherche avec Perplexity via edge function
      const { data: researchData, error: researchError } = await supabase.functions.invoke('market-research', {
        body: { 
          businessName,
          industry,
          query: `Analyse du march√© ${industry} - concurrents, tendances, opportunit√©s et d√©fis pour ${businessName}`
        }
      });

      if (researchError) {
        throw new Error(`Erreur lors de la recherche: ${researchError.message}`);
      }

      // Analyser les r√©sultats de recherche avec l'IA
      const analysisPrompt = `
Analysez les donn√©es de recherche sectorielle suivantes et structurez-les pour cr√©er un contexte client pertinent.

Entreprise: ${businessName}
Secteur: ${industry}
Donn√©es de recherche: ${researchData.content || 'Donn√©es non disponibles'}

Retournez au format JSON:
{
  "competitiveAnalysis": "analyse d√©taill√©e de la concurrence et positionnement",
  "marketTrends": "tendances principales du secteur",
  "opportunities": ["opportunit√© 1", "opportunit√© 2", "opportunit√© 3"],
  "challenges": ["d√©fi 1", "d√©fi 2", "d√©fi 3"]
}

Soyez pr√©cis et actionnable pour une strat√©gie marketing.
      `;

      // Parser le mod√®le s√©lectionn√©
      const [provider, model] = selectedModel.includes(':') 
        ? selectedModel.split(':') 
        : ['openai', selectedModel];

      const { data, error } = await supabase.functions.invoke('secure-llm-api', {
        body: {
          provider,
          model,
          messages: [
            { role: 'system', content: 'Tu es un expert en analyse de march√© et recherche concurrentielle.' },
            { role: 'user', content: analysisPrompt }
          ],
          maxTokens: 1500,
          temperature: 0.3
        }
      });

      if (error) {
        throw new Error(`Erreur IA: ${error.message}`);
      }

      // La r√©ponse est d√©sormais normalis√©e par l'edge function
      const responseContent = data?.content || '';
      if (!responseContent) {
        console.error('Aucun contenu dans la r√©ponse:', data);
        throw new Error('R√©ponse vide du service LLM');
      }

      // Parser la r√©ponse JSON
      let researchResult: MarketResearch;
      try {
        const jsonMatch = responseContent?.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          researchResult = JSON.parse(jsonMatch[0]);
        } else {
          throw new Error('Format de r√©ponse invalide');
        }
      } catch (parseError) {
        console.error('Erreur de parsing JSON:', parseError);
        // Fallback
        researchResult = {
          competitiveAnalysis: 'Analyse concurrentielle √† approfondir',
          marketTrends: 'Tendances du march√© √† identifier',
          opportunities: ['Opportunit√©s √† explorer'],
          challenges: ['D√©fis √† relever']
        };
      }

      console.log('‚úÖ Recherche sectorielle termin√©e:', researchResult);
      return researchResult;

    } catch (error) {
      console.error('‚ùå Erreur lors de la recherche sectorielle:', error);
      throw new Error(`Impossible d'effectuer la recherche sectorielle: ${(error as Error).message}`);
    }
  }

  // G√©n√©rer le contexte client final
  static async generateClientContext(data: ClientContextData, selectedModel: string = 'openai:gpt-4.1-2025-04-14'): Promise<GeneratedContext> {
    console.log('üß† G√©n√©ration du contexte client pour:', data.businessName);
    
    try {
      const contextPrompt = `
Cr√©ez un contexte client complet et professionnel bas√© sur les analyses suivantes.

ENTREPRISE: ${data.businessName}
SITE WEB: ${data.websiteUrl}

ANALYSE DU SITE WEB:
- Secteur: ${data.websiteAnalysis.industry}
- Ton: ${data.websiteAnalysis.toneOfVoice}
- Messages cl√©s: ${data.websiteAnalysis.keyMessages.join(', ')}
- Style: ${data.websiteAnalysis.communicationStyle}
- Valeurs: ${data.websiteAnalysis.brandValues.join(', ')}
- Cible: ${data.websiteAnalysis.targetAudience}

RECHERCHE MARCH√â:
- Analyse concurrentielle: ${data.marketResearch.competitiveAnalysis}
- Tendances: ${data.marketResearch.marketTrends}
- Opportunit√©s: ${data.marketResearch.opportunities.join(', ')}
- D√©fis: ${data.marketResearch.challenges.join(', ')}

G√©n√©rez un contexte client structur√© au format JSON:
{
  "businessContext": "contexte business d√©taill√© et actionnable (200-300 mots)",
  "editorialGuidelines": "guidelines √©ditoriales pr√©cises pour la cr√©ation de contenu (150-200 mots)"
}

Le contexte doit √™tre:
- Professionnel et d√©taill√©
- Actionnable pour la cr√©ation de campagnes publicitaires
- Bas√© sur les donn√©es analys√©es
- Adapt√© au secteur et √† la cible
      `;

      // Parser le mod√®le s√©lectionn√©
      const [provider, model] = selectedModel.includes(':') 
        ? selectedModel.split(':') 
        : ['openai', selectedModel];

      const { data: llmResponse, error } = await supabase.functions.invoke('secure-llm-api', {
        body: {
          provider,
          model,
          messages: [
            { role: 'system', content: 'Tu es un expert en g√©n√©ration de contextes clients pour le marketing digital.' },
            { role: 'user', content: contextPrompt }
          ],
          maxTokens: 2000,
          temperature: 0.3
        }
      });

      if (error) {
        throw new Error(`Erreur IA: ${error.message}`);
      }

      // La r√©ponse est d√©sormais normalis√©e par l'edge function
      const responseContent = llmResponse?.content || '';
      if (!responseContent) {
        console.error('Aucun contenu dans la r√©ponse:', llmResponse);
        throw new Error('R√©ponse vide du service LLM');
      }

      // Parser la r√©ponse JSON
      let contextResult: { businessContext: string; editorialGuidelines: string };
      try {
        const jsonMatch = responseContent?.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          contextResult = JSON.parse(jsonMatch[0]);
        } else {
          throw new Error('Format de r√©ponse invalide');
        }
      } catch (parseError) {
        console.error('Erreur de parsing JSON:', parseError);
        // Fallback avec contexte g√©n√©r√© √† partir des donn√©es
        contextResult = {
          businessContext: `${data.businessName} √©volue dans le secteur ${data.websiteAnalysis.industry} avec un positionnement ${data.websiteAnalysis.toneOfVoice}. L'entreprise cible ${data.websiteAnalysis.targetAudience} et communique avec un style ${data.websiteAnalysis.communicationStyle}. Les opportunit√©s identifi√©es incluent ${data.marketResearch.opportunities.join(', ')}.`,
          editorialGuidelines: `Le contenu doit adopter un ton ${data.websiteAnalysis.toneOfVoice} en respectant les valeurs de la marque : ${data.websiteAnalysis.brandValues.join(', ')}. Les messages cl√©s √† mettre en avant sont : ${data.websiteAnalysis.keyMessages.join(', ')}.`
        };
      }

      // Combiner toutes les donn√©es
      const finalContext: GeneratedContext = {
        industry: data.websiteAnalysis.industry,
        toneOfVoice: data.websiteAnalysis.toneOfVoice,
        keyMessages: data.websiteAnalysis.keyMessages,
        communicationStyle: data.websiteAnalysis.communicationStyle,
        competitiveAnalysis: data.marketResearch.competitiveAnalysis,
        marketTrends: data.marketResearch.marketTrends,
        businessContext: contextResult.businessContext,
        editorialGuidelines: contextResult.editorialGuidelines,
        targetAudience: data.websiteAnalysis.targetAudience,
        brandValues: data.websiteAnalysis.brandValues
      };

      console.log('‚úÖ Contexte client g√©n√©r√© avec succ√®s');
      return finalContext;

    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration du contexte:', error);
      throw new Error(`Impossible de g√©n√©rer le contexte client: ${(error as Error).message}`);
    }
  }
}