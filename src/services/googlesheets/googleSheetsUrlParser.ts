
/**
 * Service d√©di√© uniquement √† l'extraction d'ID depuis les URLs Google Sheets
 * Approche simplifi√©e et robuste
 */
export class GoogleSheetsUrlParser {
  /**
   * Extraction d'ID Google Sheets avec approche ultra-robuste
   */
  static extractSheetId(url: string): { id: string | null; debugInfo: any } {
    const debugInfo = {
      originalUrl: url,
      urlType: typeof url,
      urlLength: url?.length || 0,
      steps: []
    };

    console.log('üîç === DEBUT EXTRACTION ID ULTRA-ROBUSTE ===');
    console.log('URL originale:', url);
    
    // √âtape 1: Validation de base
    if (!url || typeof url !== 'string') {
      debugInfo.steps.push('ERREUR: URL invalide ou vide');
      console.log('‚ùå URL invalide:', { url, type: typeof url });
      return { id: null, debugInfo };
    }

    // √âtape 2: Nettoyage ultra-agressif
    let cleanUrl = url.trim();
    
    // Supprimer tous les caract√®res invisibles
    cleanUrl = cleanUrl.replace(/[\u200B-\u200D\uFEFF\u00A0]/g, '');
    
    // Supprimer tout apr√®s # ou ?
    cleanUrl = cleanUrl.split('#')[0].split('?')[0];
    
    // Supprimer les espaces en d√©but/fin
    cleanUrl = cleanUrl.trim();
    
    debugInfo.steps.push(`Nettoyage: "${cleanUrl}"`);
    console.log('üßπ URL nettoy√©e:', cleanUrl);

    // √âtape 3: V√©rification domaine Google
    const isGoogleSheets = cleanUrl.includes('docs.google.com/spreadsheets') || 
                          cleanUrl.includes('sheets.google.com');
    
    if (!isGoogleSheets) {
      debugInfo.steps.push('ERREUR: Pas une URL Google Sheets');
      console.log('‚ùå Pas une URL Google Sheets');
      return { id: null, debugInfo };
    }

    // √âtape 4: Extraction par patterns multiples (du plus sp√©cifique au plus g√©n√©ral)
    const extractionPatterns = [
      {
        name: 'Pattern standard /d/',
        regex: /\/spreadsheets\/d\/([a-zA-Z0-9-_]{25,})/,
        description: 'Pattern principal Google Sheets'
      },
      {
        name: 'Pattern avec user /u/',
        regex: /\/u\/\d+\/spreadsheets\/d\/([a-zA-Z0-9-_]{25,})/,
        description: 'URL avec utilisateur sp√©cifique'
      },
      {
        name: 'Pattern simple /d/',
        regex: /\/d\/([a-zA-Z0-9-_]{20,})/,
        description: 'Pattern g√©n√©rique'
      },
      {
        name: 'Pattern tr√®s permissif',
        regex: /([a-zA-Z0-9-_]{44})/,
        description: 'ID Google typique (44 caract√®res)'
      }
    ];

    for (const pattern of extractionPatterns) {
      console.log(`üîç Test pattern: ${pattern.name}`);
      debugInfo.steps.push(`Test pattern: ${pattern.name}`);
      
      const match = cleanUrl.match(pattern.regex);
      if (match && match[1]) {
        const extractedId = match[1];
        console.log(`‚úÖ ID trouv√© avec ${pattern.name}:`, extractedId);
        
        // Validation finale de l'ID
        if (this.validateGoogleSheetId(extractedId)) {
          debugInfo.steps.push(`SUCC√àS: ID valide trouv√© avec ${pattern.name}`);
          console.log('‚úÖ === ID EXTRAIT AVEC SUCC√àS ===');
          return { id: extractedId, debugInfo };
        } else {
          debugInfo.steps.push(`ID trouv√© mais invalide: ${extractedId}`);
          console.log(`‚ö†Ô∏è ID trouv√© mais invalide:`, extractedId);
        }
      }
    }

    // √âtape 5: Tentative d'extraction manuelle par d√©coupage
    console.log('üîÑ Tentative extraction manuelle...');
    const urlParts = cleanUrl.split('/');
    const dIndex = urlParts.indexOf('d');
    
    if (dIndex !== -1 && dIndex < urlParts.length - 1) {
      const possibleId = urlParts[dIndex + 1];
      console.log('üîç ID potentiel trouv√© par d√©coupage:', possibleId);
      
      if (this.validateGoogleSheetId(possibleId)) {
        debugInfo.steps.push('SUCC√àS: ID valide trouv√© par d√©coupage manuel');
        console.log('‚úÖ === ID EXTRAIT PAR D√âCOUPAGE ===');
        return { id: possibleId, debugInfo };
      }
    }

    // √âchec complet
    debugInfo.steps.push('√âCHEC: Aucun ID valide trouv√©');
    console.log('‚ùå === √âCHEC EXTRACTION COMPL√àTE ===');
    console.log('URL analys√©e:', cleanUrl);
    console.log('Patterns test√©s:', extractionPatterns.length);
    
    return { id: null, debugInfo };
  }

  /**
   * Validation stricte d'un ID Google Sheets
   */
  private static validateGoogleSheetId(id: string): boolean {
    if (!id || typeof id !== 'string') {
      return false;
    }

    // Un ID Google Sheets fait g√©n√©ralement entre 20 et 50 caract√®res
    // et contient uniquement des caract√®res alphanum√©riques, tirets et underscores
    const isValidLength = id.length >= 20 && id.length <= 50;
    const isValidFormat = /^[a-zA-Z0-9-_]+$/.test(id);
    
    console.log(`üîç Validation ID "${id}":`, {
      length: id.length,
      isValidLength,
      isValidFormat,
      isValid: isValidLength && isValidFormat
    });
    
    return isValidLength && isValidFormat;
  }

  /**
   * M√©thode utilitaire pour tester une URL
   */
  static testUrl(url: string): void {
    console.log('üß™ === TEST URL ===');
    const result = this.extractSheetId(url);
    console.log('R√©sultat:', result);
    console.log('Debug Info:', result.debugInfo);
  }
}
