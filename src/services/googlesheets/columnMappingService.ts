
import { GoogleSheetsService } from "../googlesheets/googleSheetsService";

/**
 * Service pour le mapping dynamique des colonnes Google Sheets
 */
export class ColumnMappingService {
  /**
   * D√©tecter et mapper automatiquement les colonnes importantes
   */
  static async analyzeSheetStructure(sheetId: string): Promise<{
    headers: string[];
    mappings: {
      campaignColumn: number;
      adGroupColumn: number;
      keywordsColumn: number;
      title1Column: number;
      title2Column: number;
      title3Column: number;
      description1Column: number;
      description2Column: number;
    };
    isValid: boolean;
    errors: string[];
  }> {
    try {
      const sheetData = await GoogleSheetsService.getSheetData(sheetId);
      const headers = sheetData.values?.[0] || [];
      
      console.log('üîç Analyse structure feuille:', headers);
      
      const mappings = {
        campaignColumn: this.findColumnIndex(headers, [
          'campagne', 'campaign', 'nom de la campagne', 'campaign name', 'campagnes'
        ]),
        adGroupColumn: this.findColumnIndex(headers, [
          'groupe d\'annonces', 'ad group', 'groupe annonces', 'adgroup', 'groupe', 'nom du groupe d\'annonces'
        ]),
        keywordsColumn: this.findColumnIndex(headers, [
          'mots-cl√©s', 'keywords', 'mots cl√©s', 'top 3 mots-cl√©s', 'keyword', 'mots cl√©s (s√©par√©s par des virgules)', 'top 3 mots-cl√©s (s√©par√©s par des virgules)'
        ]),
        title1Column: this.findColumnIndex(headers, [
          'titre 1', 'title 1', 'headline 1', 'h1', 'premier titre', 'headline'
        ]),
        title2Column: this.findColumnIndex(headers, [
          'titre 2', 'title 2', 'headline 2', 'h2', 'deuxi√®me titre'
        ]),
        title3Column: this.findColumnIndex(headers, [
          'titre 3', 'title 3', 'headline 3', 'h3', 'troisi√®me titre'
        ]),
        description1Column: this.findColumnIndex(headers, [
          'description 1', 'desc 1', 'description', 'premi√®re description', 'headline 4'
        ]),
        description2Column: this.findColumnIndex(headers, [
          'description 2', 'desc 2', 'deuxi√®me description', 'headline 5'
        ])
      };
      
      const errors: string[] = [];
      let isValid = true;
      
      // V√©rifier les colonnes essentielles
      if (mappings.campaignColumn === -1) {
        errors.push('Colonne "Campagne" non trouv√©e');
        isValid = false;
      }
      if (mappings.adGroupColumn === -1) {
        errors.push('Colonne "Groupe d\'annonces" non trouv√©e');
        isValid = false;
      }
      if (mappings.keywordsColumn === -1) {
        errors.push('Colonne "Mots-cl√©s" non trouv√©e');
        isValid = false;
      }
      
      // V√©rifier les colonnes de sortie
      if (mappings.title1Column === -1) {
        errors.push('Colonne "Titre 1" non trouv√©e - impossible d\'√©crire les r√©sultats');
      }
      if (mappings.description1Column === -1) {
        errors.push('Colonne "Description 1" non trouv√©e - impossible d\'√©crire les r√©sultats');
      }
      
      console.log('üìä R√©sultat mapping:', { mappings, isValid, errors });
      
      return {
        headers,
        mappings,
        isValid,
        errors
      };
      
    } catch (error) {
      console.error('‚ùå Erreur analyse structure:', error);
      return {
        headers: [],
        mappings: {
          campaignColumn: -1,
          adGroupColumn: -1,
          keywordsColumn: -1,
          title1Column: -1,
          title2Column: -1,
          title3Column: -1,
          description1Column: -1,
          description2Column: -1
        },
        isValid: false,
        errors: [`Erreur d'analyse: ${error.message}`]
      };
    }
  }
  
  /**
   * Appliquer les r√©sultats de g√©n√©ration aux bonnes colonnes
   */
  static applyGenerationResults(
    originalRow: string[],
    titles: string[],
    descriptions: string[],
    mappings: any
  ): string[] {
    const updatedRow = [...originalRow];
    
    console.log('üìù Application r√©sultats g√©n√©ration:', {
      originalRow: originalRow.slice(0, 10),
      titles,
      descriptions,
      mappings
    });
    
    // Assurer que le tableau a assez d'√©l√©ments
    const maxColumnIndex = Math.max(
      mappings.title1Column,
      mappings.title2Column,
      mappings.title3Column,
      mappings.description1Column,
      mappings.description2Column
    );
    
    while (updatedRow.length <= maxColumnIndex) {
      updatedRow.push('');
    }
    
    // Appliquer les titres
    if (titles.length > 0 && mappings.title1Column !== -1) {
      updatedRow[mappings.title1Column] = titles[0];
      console.log(`‚úÖ Titre 1 ajout√© en colonne ${mappings.title1Column}: "${titles[0]}"`);
    }
    if (titles.length > 1 && mappings.title2Column !== -1) {
      updatedRow[mappings.title2Column] = titles[1];
      console.log(`‚úÖ Titre 2 ajout√© en colonne ${mappings.title2Column}: "${titles[1]}"`);
    }
    if (titles.length > 2 && mappings.title3Column !== -1) {
      updatedRow[mappings.title3Column] = titles[2];
      console.log(`‚úÖ Titre 3 ajout√© en colonne ${mappings.title3Column}: "${titles[2]}"`);
    }
    
    // Appliquer les descriptions
    if (descriptions.length > 0 && mappings.description1Column !== -1) {
      updatedRow[mappings.description1Column] = descriptions[0];
      console.log(`‚úÖ Description 1 ajout√©e en colonne ${mappings.description1Column}: "${descriptions[0]}"`);
    }
    if (descriptions.length > 1 && mappings.description2Column !== -1) {
      updatedRow[mappings.description2Column] = descriptions[1];
      console.log(`‚úÖ Description 2 ajout√©e en colonne ${mappings.description2Column}: "${descriptions[1]}"`);
    }
    
    console.log('üìù Ligne finale apr√®s application:', updatedRow.slice(0, 15));
    
    return updatedRow;
  }
  
  /**
   * Trouver l'index d'une colonne en cherchant dans plusieurs variantes
   */
  private static findColumnIndex(headers: string[], variants: string[]): number {
    if (!headers || headers.length === 0) return -1;
    
    for (const variant of variants) {
      const index = headers.findIndex(header => 
        header?.toLowerCase().trim().includes(variant.toLowerCase())
      );
      if (index !== -1) {
        console.log(`‚úÖ Colonne trouv√©e: "${variant}" -> index ${index} (${headers[index]})`);
        return index;
      }
    }
    
    console.log(`‚ùå Aucune colonne trouv√©e pour: ${variants.join(', ')}`);
    return -1;
  }
  
  /**
   * Cr√©er une feuille avec les en-t√™tes standard
   */
  static getStandardHeaders(): string[] {
    return [
      'Nom de la campagne',
      'Nom du groupe d\'annonces',
      'Top 3 mots-cl√©s (s√©par√©s par des virgules)',
      '√âtat du groupe d\'annonces',
      'Type de correspondance par d√©faut',
      'Titre 1',
      'Titre 2',
      'Titre 3',
      'Description 1',
      'Description 2',
      'URL finale',
      'Chemin d\'affichage 1',
      'Chemin d\'affichage 2',
      'Mots-cl√©s cibl√©s',
      'Mots-cl√©s n√©gatifs',
      'Audience cibl√©e',
      'Extensions d\'annonces'
    ];
  }
}
