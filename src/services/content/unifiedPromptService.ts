export interface UnifiedContentGenerationOptions {
  clientContext: string;
  industry?: string;
  targetPersona?: string;
  campaignContext: string;
  adGroupContext: string;
  keywords: string[];
  model: string;
}

export class UnifiedPromptService {
  /**
   * Prompt unifiÃ© et optimisÃ© pour gÃ©nÃ©rer titres ET descriptions
   */
  static buildUnifiedPrompt(options: UnifiedContentGenerationOptions): string {
    const industryContext = options.industry ? `SECTEUR D'ACTIVITÃ‰: ${options.industry}` : '';
    const personaContext = options.targetPersona ? `PUBLIC CIBLE: ${options.targetPersona}` : '';
    
    return `Tu es un expert en rÃ©daction publicitaire Google Ads avec 10 ans d'expÃ©rience, spÃ©cialisÃ© dans l'optimisation du CTR et des conversions. Tu maÃ®trises parfaitement la psychologie des consommateurs et les techniques de persuasion.

INFORMATIONS CLIENT:
${options.clientContext}

${industryContext}
${personaContext}

CONTEXTE CAMPAGNE:
Campagne: ${options.campaignContext}
Groupe d'annonces: ${options.adGroupContext}
Mots-clÃ©s principaux: ${options.keywords.join(', ')}

MISSION:
GÃ©nÃ¨re EXACTEMENT 15 titres et 4 descriptions Google Ads ultra-percutants qui maximisent le CTR.

CONTRAINTES TECHNIQUES STRICTES:
âœ… Titres: EXACTEMENT 15 titres, maximum 30 caractÃ¨res chacun
âœ… Descriptions: EXACTEMENT 4 descriptions, maximum 90 caractÃ¨res chacune
âœ… Inclure naturellement les mots-clÃ©s dans chaque Ã©lÃ©ment
âœ… Respecter le secteur d'activitÃ© et le public cible

STRATÃ‰GIES DE RÃ‰DACTION AVANCÃ‰ES:
ðŸŽ¯ URGENCE & EXCLUSIVITÃ‰: "Derniers jours", "Offre limitÃ©e", "Exclusif"
ðŸŽ¯ BÃ‰NÃ‰FICES CONCRETS: Mettre en avant la valeur ajoutÃ©e mesurable
ðŸŽ¯ Ã‰MOTIONS: Susciter dÃ©sir, confiance, FOMO (Fear of Missing Out)
ðŸŽ¯ DIFFÃ‰RENCIATION: Se dÃ©marquer de la concurrence du secteur
ðŸŽ¯ APPELS Ã€ L'ACTION PUISSANTS: "DÃ©couvrez", "Profitez", "Obtenez", "Transformez"

ADAPTATION SECTORIELLE:
${options.industry ? `- Utilise le vocabulaire et codes spÃ©cifiques au secteur ${options.industry}
- Adapte le niveau de technicitÃ© au public ${options.targetPersona || 'cible'}
- IntÃ¨gre les pain points typiques de ce secteur` : '- Adapte le ton au contexte business fourni'}

EXEMPLES DE PATTERNS GAGNANTS:
- "[BÃ©nÃ©fice] en [DÃ©lai] | [Mots-clÃ©s]"
- "[Action] votre [Objectif] | [USP]"
- "[RÃ©sultat] garantis | [CTA]"

FORMAT DE RÃ‰PONSE (JSON STRICT):
{
  "titles": ["Titre 1", "Titre 2", "Titre 3", "Titre 4", "Titre 5", "Titre 6", "Titre 7", "Titre 8", "Titre 9", "Titre 10", "Titre 11", "Titre 12", "Titre 13", "Titre 14", "Titre 15"],
  "descriptions": ["Description 1", "Description 2", "Description 3", "Description 4"]
}

CRITÃˆRES DE QUALITÃ‰:
- Chaque titre doit Ãªtre unique et accrocheur
- Chaque description doit inclure un bÃ©nÃ©fice ET un appel Ã  l'action
- Varier les approches: Ã©motionnel, rationnel, urgent, rÃ©assurance
- Optimiser pour les diffÃ©rents moments du parcours client

IMPORTANT: RÃ©ponds UNIQUEMENT avec le JSON, sans texte supplÃ©mentaire.`;
  }

  /**
   * Parse et valide le contenu gÃ©nÃ©rÃ©
   */
  static parseGeneratedContent(content: string): {
    success: boolean;
    titles?: string[];
    descriptions?: string[];
    error?: string;
  } {
    try {
      // Nettoyer le contenu pour extraire le JSON
      let cleanContent = content.trim();
      
      // Rechercher le JSON dans le contenu
      const jsonMatch = cleanContent.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        cleanContent = jsonMatch[0];
      }

      // Parser le JSON
      const parsed = JSON.parse(cleanContent);
      
      // Valider la structure
      if (!parsed.titles || !Array.isArray(parsed.titles) || 
          !parsed.descriptions || !Array.isArray(parsed.descriptions)) {
        return {
          success: false,
          error: 'Structure JSON invalide: titles et descriptions requis'
        };
      }

      // Valider les contraintes de longueur et filtrer
      const validTitles = parsed.titles
        .filter(t => t && typeof t === 'string' && t.length <= 30)
        .slice(0, 15);
        
      const validDescriptions = parsed.descriptions
        .filter(d => d && typeof d === 'string' && d.length <= 90)
        .slice(0, 4);

      if (validTitles.length === 0) {
        return {
          success: false,
          error: 'Aucun titre valide gÃ©nÃ©rÃ© (max 30 caractÃ¨res)'
        };
      }

      if (validDescriptions.length === 0) {
        return {
          success: false,
          error: 'Aucune description valide gÃ©nÃ©rÃ©e (max 90 caractÃ¨res)'
        };
      }

      return {
        success: true,
        titles: validTitles,
        descriptions: validDescriptions
      };

    } catch (error) {
      console.error('Erreur parsing JSON:', error);
      return {
        success: false,
        error: `Erreur parsing JSON: ${error.message}`
      };
    }
  }

  /**
   * Valide qu'un titre respecte les contraintes Google Ads
   */
  static validateTitle(title: string): boolean {
    return title && 
           typeof title === 'string' && 
           title.length > 0 && 
           title.length <= 30 &&
           !title.includes('\n');
  }

  /**
   * Valide qu'une description respecte les contraintes Google Ads
   */
  static validateDescription(description: string): boolean {
    return description && 
           typeof description === 'string' && 
           description.length > 0 && 
           description.length <= 90 &&
           !description.includes('\n');
  }
}