
import { supabase } from '@/integrations/supabase/client';
import { googleSheetsCoreService } from '@/services/core/googleSheetsCore';
import { ColumnMappingService } from '@/services/googlesheets/columnMappingService';

export interface ContentGenerationOptions {
  model: string;
  clientContext: string;
  campaignContext: string;
  adGroupContext: string;
  keywords: string[];
  validateContent?: boolean;
  saveToHistory?: boolean;
  createBackup?: boolean;
  autoCleanContent?: boolean;
  maxRegenerateAttempts?: number;
}

export interface ContentGenerationResult {
  success: boolean;
  titles?: string[];
  descriptions?: string[];
  error?: string;
  tokensUsed?: number;
  validationResults?: any;
}

export class EnhancedContentGenerationService {
  static async generateContent(
    options: ContentGenerationOptions,
    sheetId: string,
    currentSheetData: any[][],
    config?: {
      validateContent?: boolean;
      saveToHistory?: boolean;
      createBackup?: boolean;
      autoCleanContent?: boolean;
      maxRegenerateAttempts?: number;
    }
  ): Promise<ContentGenerationResult> {
    try {
      console.log('üöÄ === DEBUT GENERATION CONTENU AMELIOREE ===');
      console.log('üìä Options:', options);
      console.log('üìã Feuille ID:', sheetId);

      // Construire le prompt optimis√©
      const prompt = this.buildOptimizedPrompt(options);
      console.log('üìù Prompt construit:', prompt.substring(0, 200) + '...');

      // D√©terminer le provider et le mod√®le depuis la s√©lection
      let { provider, model } = this.parseModelSelection(options.model);
      
      // FALLBACK: Si c'est un vieux mod√®le Claude, forcer vers Claude 4 Sonnet
      if (provider === 'anthropic' && (model.includes('claude-3-sonnet-20240229') || model.includes('claude-3') || model === 'claude-3')) {
        console.log(`‚ö†Ô∏è Mod√®le obsol√®te d√©tect√© (${model}), passage forc√© vers Claude 4 Sonnet`);
        model = 'claude-sonnet-4-20250514';
      }
      
      console.log('üéØ Provider/Mod√®le finaux:', { provider, model });

      // Appeler l'API de g√©n√©ration avec le bon provider
      const response = await supabase.functions.invoke('llm-generation', {
        body: {
          prompt,
          provider,
          model
        }
      });

      console.log('üîÑ R√©ponse API:', response);

      if (response.error) {
        console.error('‚ùå Erreur API:', response.error);
        return {
          success: false,
          error: `Erreur API: ${response.error.message || response.error}`
        };
      }

      // Extraire le contenu de la r√©ponse (response.data contient d√©j√† la r√©ponse de l'API)
      const generatedContent = response.data?.content?.[0]?.text || response.data?.choices?.[0]?.message?.content;
      
      if (!generatedContent) {
        console.error('‚ùå Pas de contenu g√©n√©r√©:', response.data);
        return {
          success: false,
          error: 'Aucun contenu g√©n√©r√© par l\'IA'
        };
      }

      console.log('‚úÖ Contenu g√©n√©r√© re√ßu:', generatedContent.substring(0, 300) + '...');

      // Parser le contenu JSON
      const parsedContent = this.parseGeneratedContent(generatedContent);
      
      if (!parsedContent.success) {
        console.error('‚ùå Erreur parsing:', parsedContent.error);
        return {
          success: false,
          error: `Erreur de parsing: ${parsedContent.error}`
        };
      }

      console.log('‚úÖ Contenu pars√©:', parsedContent);

      // Sauvegarder l'historique si demand√©
      if (config?.saveToHistory) {
        await this.saveToHistory(options, parsedContent, sheetId);
      }

      return {
        success: true,
        titles: parsedContent.titles,
        descriptions: parsedContent.descriptions,
        tokensUsed: response.data?.usage?.total_tokens || response.data?.usage?.input_tokens + response.data?.usage?.output_tokens || 0
      };

    } catch (error) {
      console.error('‚ùå === ERREUR GENERATION CONTENU ===', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      };
    }
  }

  private static buildOptimizedPrompt(options: ContentGenerationOptions): string {
    return `Vous √™tes un r√©dacteur publicitaire hautement qualifi√© avec une solide exp√©rience en r√©daction persuasive, en optimisation des conversions et en techniques de marketing. Vous r√©digez des textes convaincants qui touchent les √©motions et les besoins du public cible, les incitant √† agir ou √† acheter. Vous comprenez l'importance de la m√©thode AIDA (Attention, Int√©r√™t, D√©sir et Action) et d'autres formules de r√©daction √©prouv√©es, que vous int√©grez parfaitement dans vos √©crits. Vous avez un talent pour cr√©er des titres accrocheurs, des introductions captivantes et des appels √† l'action persuasifs. Vous ma√Ætrisez bien la psychologie des consommateurs et utilisez ces connaissances pour cr√©er des messages qui r√©sonnent avec le public cible.


CONTEXTE CLIENT:
${options.clientContext}

CONTEXTE CAMPAGNE:
Campagne: ${options.campaignContext}
Groupe d'annonces: ${options.adGroupContext}
Mots-cl√©s principaux: ${options.keywords.join(', ')}

T√ÇCHE:
G√©n√®re EXACTEMENT 15 titres et 4 descriptions pour Google Ads en respectant ces contraintes:
- Titres: EXACTEMENT 15 titres, maximum 30 caract√®res chacun
- Descriptions: EXACTEMENT 4 descriptions, maximum 90 caract√®res chacune
- Inclure les mots-cl√©s naturellement
- Ton persuasif et accrocheur
- Appel √† l'action clair

FORMAT DE R√âPONSE (JSON uniquement):
{
  "titles": ["Titre 1", "Titre 2", "Titre 3", "Titre 4", "Titre 5", "Titre 6", "Titre 7", "Titre 8", "Titre 9", "Titre 10", "Titre 11", "Titre 12", "Titre 13", "Titre 14", "Titre 15"],
  "descriptions": ["Description 1", "Description 2", "Description 3", "Description 4"]
}

IMPORTANT: R√©ponds UNIQUEMENT avec le JSON, sans texte suppl√©mentaire.`;
  }

  private static parseGeneratedContent(content: string): {
    success: boolean;
    titles?: string[];
    descriptions?: string[];
    error?: string;
  } {
    try {
      // Nettoyer le contenu pour extraire le JSON
      let cleanContent = content.trim();
      
      // Rechercher le JSON dans le contenu
      const jsonMatch = cleanContent.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        cleanContent = jsonMatch[0];
      }

      // Parser le JSON
      const parsed = JSON.parse(cleanContent);
      
      // Valider la structure
      if (!parsed.titles || !Array.isArray(parsed.titles) || 
          !parsed.descriptions || !Array.isArray(parsed.descriptions)) {
        return {
          success: false,
          error: 'Structure JSON invalide: titles et descriptions requis'
        };
      }

      // Valider les contraintes
      const validTitles = parsed.titles.filter(t => t && t.length <= 30);
      const validDescriptions = parsed.descriptions.filter(d => d && d.length <= 90);

      if (validTitles.length === 0) {
        return {
          success: false,
          error: 'Aucun titre valide g√©n√©r√©'
        };
      }

      if (validDescriptions.length === 0) {
        return {
          success: false,
          error: 'Aucune description valide g√©n√©r√©e'
        };
      }

      return {
        success: true,
        titles: validTitles.slice(0, 15),
        descriptions: validDescriptions.slice(0, 4)
      };

    } catch (error) {
      console.error('Erreur parsing JSON:', error);
      return {
        success: false,
        error: `Erreur parsing JSON: ${error.message}`
      };
    }
  }

  private static async saveToHistory(
    options: ContentGenerationOptions,
    content: any,
    sheetId: string
  ): Promise<void> {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;

      // D√©terminer le provider bas√© sur le mod√®le
      const { provider } = this.parseModelSelection(options.model);

      await supabase.from('content_generations').insert({
        user_id: user.id,
        sheet_id: sheetId,
        campaign_name: options.campaignContext,
        ad_group_name: options.adGroupContext,
        provider,
        model: options.model,
        prompt_data: {
          clientContext: options.clientContext,
          keywords: options.keywords
        },
        generated_content: content,
        tokens_used: 0
      });
    } catch (error) {
      console.error('Erreur sauvegarde historique:', error);
    }
  }

  static async generateAndSaveContent(
    options: ContentGenerationOptions,
    sheetId: string,
    rowIndex: number,
    currentSheetData: any[][]
  ): Promise<{
    success: boolean;
    updatedSheetData?: any[][];
    error?: string;
  }> {
    try {
      console.log(`üéØ === GENERATION ET SAUVEGARDE LIGNE ${rowIndex + 1} ===`);
      console.log('üìä Donn√©es feuille actuelles:', {
        totalRows: currentSheetData.length,
        headers: currentSheetData[0],
        targetRowIndex: rowIndex,
        targetRowData: currentSheetData[rowIndex]
      });
      
      // Analyser la structure de la feuille
      const structureAnalysis = await ColumnMappingService.analyzeSheetStructure(sheetId);
      
      if (!structureAnalysis.isValid) {
        console.error('‚ùå Structure feuille invalide:', structureAnalysis.errors);
        return {
          success: false,
          error: `Structure feuille invalide: ${structureAnalysis.errors.join(', ')}`
        };
      }

      console.log('üìä Structure feuille valid√©e:', structureAnalysis.mappings);

      // G√©n√©rer le contenu
      const result = await this.generateContent(options, sheetId, currentSheetData);
      
      if (!result.success || !result.titles || !result.descriptions) {
        console.error('‚ùå G√©n√©ration √©chou√©e:', result.error);
        return {
          success: false,
          error: result.error || 'G√©n√©ration √©chou√©e'
        };
      }

      console.log('‚úÖ Contenu g√©n√©r√©:', {
        titles: result.titles,
        descriptions: result.descriptions
      });

      // Appliquer les r√©sultats √† la ligne
      const updatedSheetData = [...currentSheetData];
      const originalRow = updatedSheetData[rowIndex] || [];
      
      console.log('üìù Avant application des r√©sultats:', {
        rowIndex,
        originalRow: originalRow.slice(0, 10),
        rowLength: originalRow.length
      });
      
      const updatedRow = ColumnMappingService.applyGenerationResults(
        originalRow,
        result.titles,
        result.descriptions,
        structureAnalysis.mappings
      );

      updatedSheetData[rowIndex] = updatedRow;

      console.log('üìù Apr√®s application des r√©sultats:', {
        originalRow: originalRow.slice(0, 10),
        updatedRow: updatedRow.slice(0, 10),
        fullUpdatedRow: updatedRow
      });

      // Sauvegarder dans Google Sheets
      console.log('üíæ Tentative sauvegarde Google Sheets...');
      console.log('üìä Donn√©es √† sauvegarder:', {
        sheetId,
        dataSize: updatedSheetData.length + 'x' + (updatedSheetData[0]?.length || 0),
        firstRow: updatedSheetData[0],
        updatedTargetRow: updatedSheetData[rowIndex]
      });
      
      const saveSuccess = await googleSheetsCoreService.saveSheetData(sheetId, updatedSheetData);
      
      if (!saveSuccess) {
        console.error('‚ùå √âchec sauvegarde Google Sheets');
        return {
          success: false,
          error: '√âchec de la sauvegarde dans Google Sheets'
        };
      }

      console.log('‚úÖ Sauvegarde Google Sheets r√©ussie');

      return {
        success: true,
        updatedSheetData
      };

    } catch (error) {
      console.error('‚ùå === ERREUR GENERATION ET SAUVEGARDE ===', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      };
    }
  }

  private static parseModelSelection(modelSelection: string): { provider: string; model: string } {
    // Si le mod√®le contient ":", c'est le format "provider:model"
    if (modelSelection && modelSelection.includes(':')) {
      const [provider, model] = modelSelection.split(':');
      return { provider, model };
    }

    // Sinon, d√©tecter le provider bas√© sur le nom du mod√®le
    if (!modelSelection) {
      return { provider: 'anthropic', model: 'claude-sonnet-4-20250514' };
    }

    // Mod√®les OpenAI
    if (modelSelection.includes('gpt') || modelSelection.includes('o1')) {
      return { provider: 'openai', model: modelSelection };
    }

    // Mod√®les Anthropic
    if (modelSelection.includes('claude')) {
      return { provider: 'anthropic', model: modelSelection };
    }

    // Mod√®les Google
    if (modelSelection.includes('gemini')) {
      return { provider: 'google', model: modelSelection };
    }

    // Par d√©faut, utiliser Claude 4 Sonnet
    return { provider: 'anthropic', model: 'claude-sonnet-4-20250514' };
  }
}

export const enhancedContentGenerationService = EnhancedContentGenerationService;
