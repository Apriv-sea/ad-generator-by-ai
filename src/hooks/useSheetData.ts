import { useState, useEffect } from "react";
import { Sheet, Client } from "@/services/types";
import { getClientInfo } from "@/services/clientService";
import { toast } from "sonner";
import { googleSheetsService } from "@/services/googlesheets/googleSheetsService";

export function useSheetData(sheet: Sheet | null) {
  const [clientInfo, setClientInfo] = useState<Client | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [sheetData, setSheetData] = useState<any[][] | null>(null);

  useEffect(() => {
    if (sheet) {
      loadInitialData();
      loadClientInfo();
    }
  }, [sheet]);

  const loadInitialData = async () => {
    if (!sheet) return;
    
    console.log("üîç === DEBUT CHARGEMENT OPTIMISE ===");
    console.log("üîç HOOK - Tentative de chargement des donn√©es pour la feuille:", sheet.id);
    console.log("üîç HOOK - Type de feuille:", sheet.id.startsWith('sheet_') ? 'LOCAL' : 'GOOGLE_SHEETS');
    setIsLoading(true);
    
    try {
      // Pour les feuilles locales, r√©cup√©rer depuis le localStorage
      if (sheet.id.startsWith('sheet_')) {
        console.log("üìÅ HOOK - Traitement feuille locale");
        const storedData = localStorage.getItem(`sheet_data_${sheet.id}`);
        if (storedData) {
          const data = JSON.parse(storedData);
          console.log("üìÅ HOOK - Donn√©es locales trouv√©es:", {
            hasValues: !!data.values,
            valuesLength: data.values?.length || 0,
            firstRow: data.values?.[0],
            allData: data.values
          });
          setSheetData(data.values || []);
          toast.success("Donn√©es charg√©es depuis le stockage local");
        } else {
          console.log("üìÅ HOOK - Aucune donn√©e locale trouv√©e");
          setSheetData([]);
          toast.info("Aucune donn√©e trouv√©e pour cette feuille locale");
        }
        return;
      }

      // Pour les feuilles Google Sheets, utiliser le service am√©lior√©
      console.log("üìä HOOK - Traitement feuille Google Sheets, appel du service...");
      
      // Utiliser une plage plus large pour capturer toutes les donn√©es
      const data = await googleSheetsService.getSheetData(sheet.id, 'A1:AZ1000');
      
      console.log("üìä HOOK - Donn√©es brutes re√ßues du service:", {
        hasData: !!data,
        hasValues: !!data?.values,
        valuesIsArray: Array.isArray(data?.values),
        valuesLength: data?.values?.length || 0,
        title: data?.title,
        range: data?.range,
        rangeUsed: data?.rangeUsed,
        firstRow: data?.values?.[0],
        sampleRows: data?.values?.slice(0, 3)
      });
      
      if (data && data.values && Array.isArray(data.values)) {
        console.log(`üìä HOOK - Analyse d√©taill√©e des ${data.values.length} lignes re√ßues:`);
        
        // Analyser chaque ligne pour diagnostiquer
        const lineAnalysis = data.values.map((row, index) => {
          const rowArray = Array.isArray(row) ? row : [];
          const hasContent = rowArray.some(cell => cell !== null && cell !== undefined && String(cell).trim() !== '');
          return {
            index,
            length: rowArray.length,
            hasContent,
            content: rowArray.slice(0, 5), // Premi√®re 5 colonnes pour debug
            fullRow: rowArray
          };
        });
        
        console.log("üìã Analyse ligne par ligne:", lineAnalysis);
        
        // Filtrage plus intelligent des lignes vides
        const processedRows = data.values.filter((row, index) => {
          const rowArray = Array.isArray(row) ? row : [];
          const hasContent = rowArray.some(cell => 
            cell !== null && 
            cell !== undefined && 
            String(cell).trim() !== ''
          );
          
          // Garder la premi√®re ligne (headers) m√™me si elle semble vide
          if (index === 0) {
            console.log(`üìã Ligne ${index + 1} (headers) conserv√©e:`, rowArray);
            return true;
          }
          
          if (hasContent) {
            console.log(`üìã Ligne ${index + 1} conserv√©e (contenu d√©tect√©):`, rowArray);
            return true;
          } else {
            console.log(`üìã Ligne ${index + 1} filtr√©e (vide):`, rowArray);
            return false;
          }
        });
        
        console.log(`üìä HOOK - Apr√®s filtrage intelligent: ${processedRows.length} lignes sur ${data.values.length} originales`);
        
        setSheetData(processedRows);
        
        // Messages d'information plus pr√©cis
        if (processedRows.length === 0) {
          console.log("‚ùå HOOK - Aucune donn√©e apr√®s filtrage");
          toast.error("Aucune donn√©e trouv√©e dans la feuille. La feuille semble vide.");
        } else if (processedRows.length === 1) {
          console.log("‚ö†Ô∏è HOOK - Seuls les en-t√™tes d√©tect√©s");
          toast.warning("Seuls les en-t√™tes ont √©t√© trouv√©s. Ajoutez des donn√©es dans votre feuille Google Sheets.");
        } else {
          const dataRowsCount = processedRows.length - 1;
          console.log(`‚úÖ HOOK - ${dataRowsCount} lignes de donn√©es d√©tect√©es sur ${data.values.length} lignes totales`);
          
          if (data.values.length > processedRows.length) {
            toast.success(`${dataRowsCount} lignes de donn√©es charg√©es (${data.values.length - processedRows.length} lignes vides filtr√©es)`);
          } else {
            toast.success(`${dataRowsCount} lignes de donn√©es charg√©es avec succ√®s`);
          }
          
          // Log d√©taill√© des donn√©es finales
          console.log("üìä HOOK - Donn√©es finales par ligne:");
          processedRows.forEach((row, i) => {
            console.log(`  Ligne ${i + 1}:`, row);
          });
        }
      } else {
        console.log("‚ùå HOOK - Aucune donn√©e valide trouv√©e:", {
          hasData: !!data,
          hasValues: !!data?.values,
          valuesIsArray: Array.isArray(data?.values),
          rawData: data
        });
        toast.error("Impossible de r√©cup√©rer les donn√©es de la feuille. V√©rifiez que la feuille est accessible et contient des donn√©es.");
        setSheetData([]);
      }
      
    } catch (error) {
      console.error("‚ùå HOOK - Erreur lors du chargement:", {
        error: error,
        message: error instanceof Error ? error.message : 'Erreur inconnue',
        stack: error instanceof Error ? error.stack : undefined
      });
      
      // Messages d'erreur sp√©cifiques
      const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';
      if (errorMessage.includes('401') || errorMessage.includes('Authentification')) {
        toast.error("Erreur d'authentification Google Sheets. Reconnectez-vous.");
      } else if (errorMessage.includes('403') || errorMessage.includes('Acc√®s refus√©')) {
        toast.error("Acc√®s refus√© √† la feuille. V√©rifiez que la feuille est partag√©e ou que vous avez les permissions.");
      } else if (errorMessage.includes('404') || errorMessage.includes('introuvable')) {
        toast.error("Feuille introuvable. V√©rifiez l'URL de la feuille Google Sheets.");
      } else {
        toast.error(`Impossible de charger les donn√©es: ${errorMessage}`);
      }
      
      setSheetData([]);
    } finally {
      setIsLoading(false);
      console.log("üîç === FIN CHARGEMENT ===");
    }
  };

  const loadClientInfo = async () => {
    if (!sheet) return;
    
    try {
      let client: Client | null = null;

      // Priorit√© 1: Client ID dans la feuille (nouvelles feuilles avec client s√©lectionn√©)
      if (sheet.clientId) {
        console.log("Chargement du client depuis sheet.clientId:", sheet.clientId);
        client = await getClientInfo(sheet.clientId);
      }

      // Priorit√© 2: Contexte client direct dans la feuille (legacy)
      if (!client && sheet.clientContext) {
        console.log("Utilisation du contexte client legacy:", sheet.clientContext);
        client = {
          id: '',
          name: 'Client (contexte legacy)',
          businessContext: sheet.clientContext
        };
      }

      if (client) {
        console.log("Client trouv√©:", client);
        setClientInfo(client);
      } else {
        console.log("Aucun client trouv√© pour cette feuille");
        setClientInfo(null);
      }
    } catch (error) {
      console.error("Erreur lors du chargement des informations client:", error);
      setClientInfo(null);
    }
  };

  return {
    clientInfo,
    isLoading,
    sheetData,
    setSheetData,
    refreshData: loadInitialData
  };
}
