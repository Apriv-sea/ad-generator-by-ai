import { useState, useEffect } from "react";
import { Sheet, Client } from "@/services/types";
import { getClientInfo } from "@/services/clientService";
import { toast } from "sonner";
import { googleSheetsService } from "@/services/googlesheets/googleSheetsService";

export function useSheetData(sheet: Sheet | null) {
  const [clientInfo, setClientInfo] = useState<Client | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [sheetData, setSheetData] = useState<any[][] | null>(null);

  useEffect(() => {
    if (sheet) {
      loadInitialData();
      loadClientInfo();
    }
  }, [sheet]);

  const loadInitialData = async () => {
    if (!sheet) return;
    
    console.log("üîç HOOK - Tentative de chargement des donn√©es pour la feuille:", sheet.id);
    console.log("üîç HOOK - Type de feuille:", sheet.id.startsWith('sheet_') ? 'LOCAL' : 'GOOGLE_SHEETS');
    setIsLoading(true);
    
    try {
      // Pour les feuilles locales, r√©cup√©rer depuis le localStorage
      if (sheet.id.startsWith('sheet_')) {
        console.log("üìÅ HOOK - Traitement feuille locale");
        const storedData = localStorage.getItem(`sheet_data_${sheet.id}`);
        if (storedData) {
          const data = JSON.parse(storedData);
          console.log("üìÅ HOOK - Donn√©es locales trouv√©es:", {
            hasValues: !!data.values,
            valuesLength: data.values?.length || 0,
            firstRow: data.values?.[0],
            allData: data.values
          });
          setSheetData(data.values || []);
          toast.success("Donn√©es charg√©es depuis le stockage local");
        } else {
          console.log("üìÅ HOOK - Aucune donn√©e locale trouv√©e");
          setSheetData([]);
          toast.info("Aucune donn√©e trouv√©e pour cette feuille locale");
        }
        return;
      }

      // Pour les feuilles Google Sheets, utiliser le service avec range √©tendu
      console.log("üìä HOOK - Traitement feuille Google Sheets, appel du service...");
      
      // Essayer d'abord avec une plage plus large pour capturer toutes les donn√©es
      const ranges = ['A:Z', 'A1:Z1000', 'Sheet1!A:Z', 'A1:AZ1000'];
      let data = null;
      let successRange = null;
      
      for (const range of ranges) {
        try {
          console.log(`üìä HOOK - Tentative avec la plage: ${range}`);
          data = await googleSheetsService.getSheetData(sheet.id, range);
          
          if (data && data.values && data.values.length > 0) {
            successRange = range;
            console.log(`‚úÖ HOOK - Succ√®s avec la plage ${range}, ${data.values.length} lignes trouv√©es`);
            break;
          }
        } catch (rangeError) {
          console.log(`‚ö†Ô∏è HOOK - √âchec avec la plage ${range}:`, rangeError.message);
          continue;
        }
      }
      
      console.log("üìä HOOK - Donn√©es re√ßues du service Google Sheets:", {
        hasData: !!data,
        hasValues: !!data?.values,
        valuesIsArray: Array.isArray(data?.values),
        valuesLength: data?.values?.length || 0,
        title: data?.title,
        successRange: successRange,
        rawDataSample: data?.values?.slice(0, 5),
        allRows: data?.values,
        completeData: data
      });
      
      if (data && data.values && Array.isArray(data.values) && data.values.length > 0) {
        console.log(`üìä HOOK - Donn√©es valides d√©tect√©es:`, {
          totalRows: data.values.length,
          expectedRows: 7, // Selon votre screenshot
          firstRow: data.values[0],
          hasMultipleRows: data.values.length > 1,
          allRowsDetails: data.values.map((row, index) => ({
            rowIndex: index,
            rowLength: row?.length || 0,
            rowContent: row?.slice(0, 5), // Premi√®re 5 colonnes seulement
            isEmpty: !row || row.every(cell => !cell || cell.toString().trim() === '')
          })),
          nonEmptyRows: data.values.filter(row => row && row.some(cell => cell && cell.toString().trim() !== '')).length
        });
        
        // Filtrer les lignes compl√®tement vides
        const nonEmptyRows = data.values.filter(row => 
          row && row.some(cell => cell && cell.toString().trim() !== '')
        );
        
        console.log(`üìä HOOK - Apr√®s filtrage des lignes vides: ${nonEmptyRows.length} lignes`);
        
        setSheetData(nonEmptyRows);
        
        if (nonEmptyRows.length === 1) {
          console.log("‚ö†Ô∏è HOOK - Seuls les en-t√™tes d√©tect√©s");
          toast.warning(`Seuls les en-t√™tes ont √©t√© trouv√©s. V√©rifiez que votre feuille contient des donn√©es.`);
        } else if (nonEmptyRows.length < 7) {
          console.log(`‚ö†Ô∏è HOOK - Moins de lignes que pr√©vu d√©tect√©es: ${nonEmptyRows.length} au lieu de 7`);
          toast.warning(`${nonEmptyRows.length} lignes charg√©es (${nonEmptyRows.length - 1} lignes de donn√©es). Attendu: 7 lignes selon votre feuille.`);
        } else {
          console.log(`‚úÖ HOOK - ${nonEmptyRows.length - 1} lignes de donn√©es d√©tect√©es`);
          toast.success(`Donn√©es charg√©es avec succ√®s (${nonEmptyRows.length} lignes dont ${nonEmptyRows.length - 1} lignes de donn√©es)`);
        }
      } else {
        console.log("‚ùå HOOK - Aucune donn√©e valide trouv√©e:", {
          hasData: !!data,
          hasValues: !!data?.values,
          valuesIsArray: Array.isArray(data?.values),
          valuesLength: data?.values?.length || 0,
          rawData: data
        });
        toast.error("Aucune donn√©e trouv√©e dans la feuille. V√©rifiez que votre feuille contient des donn√©es et qu'elle est accessible.");
        setSheetData([]);
      }
      
    } catch (error) {
      console.error("‚ùå HOOK - Erreur lors du chargement des donn√©es:", {
        error: error,
        message: error instanceof Error ? error.message : 'Erreur inconnue',
        stack: error instanceof Error ? error.stack : undefined,
        errorType: error.constructor?.name
      });
      
      // Message d'erreur plus d√©taill√©
      const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';
      if (errorMessage.includes('401')) {
        toast.error("Erreur d'authentification Google Sheets. Veuillez vous reconnecter.");
      } else if (errorMessage.includes('403')) {
        toast.error("Acc√®s refus√© √† la feuille Google Sheets. V√©rifiez les permissions.");
      } else if (errorMessage.includes('404')) {
        toast.error("Feuille Google Sheets introuvable. V√©rifiez l'ID de la feuille.");
      } else {
        toast.error(`Impossible de charger les donn√©es: ${errorMessage}`);
      }
      
      setSheetData([]);
    } finally {
      setIsLoading(false);
    }
  };

  const loadClientInfo = async () => {
    if (!sheet) return;
    
    try {
      let client: Client | null = null;

      // Priorit√© 1: Client ID dans la feuille (nouvelles feuilles avec client s√©lectionn√©)
      if (sheet.clientId) {
        console.log("Chargement du client depuis sheet.clientId:", sheet.clientId);
        client = await getClientInfo(sheet.clientId);
      }

      // Priorit√© 2: Contexte client direct dans la feuille (legacy)
      if (!client && sheet.clientContext) {
        console.log("Utilisation du contexte client legacy:", sheet.clientContext);
        client = {
          id: '',
          name: 'Client (contexte legacy)',
          businessContext: sheet.clientContext
        };
      }

      if (client) {
        console.log("Client trouv√©:", client);
        setClientInfo(client);
      } else {
        console.log("Aucun client trouv√© pour cette feuille");
        setClientInfo(null);
      }
    } catch (error) {
      console.error("Erreur lors du chargement des informations client:", error);
      setClientInfo(null);
    }
  };

  return {
    clientInfo,
    isLoading,
    sheetData,
    setSheetData,
    refreshData: loadInitialData
  };
}
